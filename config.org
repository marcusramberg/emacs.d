#+Title: MEmacs
#+Author: Marcus Ramberg
#+Date: 2021

Trying a bit of a more manual approach. Adopted from yay-evil

* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source
Code". The variable ~global/indent-width~ controls the default
indentation across various programming modes. The default is 2, you
can change this variable to 4 or any other indentation width you
prefer, and the change will be made across all programming language
modes including C, C++, Java, Python etc.

#+BEGIN_SRC emacs-lisp
  (defvar global/indent-width 2)
  (use-package emacs
    :preface
    (define-key key-translation-map (kbd "<ESC> <ESC>") 'keyboard-escape-quit)
    :config
    (setq frame-title-format '("MEmacs")
          frame-resize-pixelwise t
          default-directory "~/")
    (setq visible-bell t)

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width global/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t))

  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun global/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun global/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'global/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'global/split-and-follow-vertically))
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we
might as well try to organize under the same syntax as much as
possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:ensure nil~ when configuring the built-in packages.
#+END_SRC
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~global/indent-width~ (all languages default to 4, except JavaScript,
which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset global/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset global/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 12.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun global/set-default-font ()
      (interactive)
      (when (member "JetBrains Mono" (font-family-list))
        (set-face-attribute 'default nil :family "JetBrains Mono"))
      (set-face-attribute 'default nil
                          :height 120
                          :weight 'normal))
    :ensure nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))
    (global/set-default-font))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC
* Third-party packages

** GUI enhancements
*** Load themes from folder and install dracula
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
  (load-theme 'dracula t)
#+END_SRC
*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "MEmacs!"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
*** Centaur Tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
  :demand
    :config
    (centaur-tabs-mode t)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+END_SRC
** Vi keybindings
Vi is Love, Vi is Life
#+BEGIN_SRC emacs-lisp
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width 2)
  ;;  (use-package evil-escape) ;; there is no escape from evil
   (global-set-key [escape] 'keyboard-quit) ;; remaps esc

#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC
** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC
** Searching/sorting enhancements & project management
*** Ivy
Ivy/Counsel/Swiper
#+BEGIN_SRC emacs-lisp
    (use-package vertico
    :init
    (vertico-mode))

  (use-package counsel
    :diminish
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :defer 0.1
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :init
    (projectile-mode +1)
    (setq projectile-project-search-path '("~/Source/" )))
#+END_SRC

** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (
         (python-mode . lsp)
         (typescript-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode)))

  (use-package org-evil)
  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package typescript-mode)
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
;            ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset global/indent_width) ; HTML
    (setq web-mode-css-indent-offset global/indent_width)    ; CSS
    (setq web-mode-code-indent-offset global/indent_width)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC
** Apps
*** Telega.el
#+BEGIN_SRC emacs-lisp
  (use-package telega
    :load-path  "~/emacs.defaut/telega.el"
    :commands (telega)
    :defer t)
#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC

** General Space
Use space as leader
#+BEGIN_SRC emacs-lisp
    (use-package general :defer t :config
      (general-create-definer space-leader :prefix "SPC")

      ;; SPC SPC
      (space-leader :keymaps 'normal "SPC" 'smex :wk "meta-x")
      (space-leader :keymaps 'normal "c-SPC" 'smex-major-mode :wk "meta-x")
      ;; SPC SPC
      (space-leader :keymaps 'normal "g" 'magit-status :wk "Git status")

      ;; SPC b
      (general-create-definer space-b-leader :prefix "SPC b")
      ;; SPC b b
      (space-b-leader :keymaps 'normal "b" 'counsel-switch-buffer :which-key "Switch buffer")
      (space-b-leader :keymaps 'normal "k" 'kill-current-buffer :which-key "Switch buffer")

      ;; SPC f
      (general-create-definer space-f-leader :prefix "SPC f" :wk "File")
      ;; SPC f f
      (space-f-leader :keymaps 'normal "f" 'counsel-find-file :wk "Find file")
      ;; SPC f r
      (space-f-leader :keymaps 'normal "r" 'counsel-buffer-or-recentf :wk "Recent")

      ;; SPC p
      (space-leader :keymaps 'normal "p" 'projectile-command-map :wk "Projectile")

      ;; SPC s
      (general-create-definer space-s-leader :prefix "SPC s")
      (space-s-leader :keymaps 'normal "s" 'swiper :wk "Swiper")
      (general-create-definer space-s-leader :prefix "SPC s")
      (space-s-leader :keymaps 'normal "p" 'projectile-ripgrep  :wk "rg in project")
      ;; SPC w
      (general-create-definer space-w-leader :prefix "SPC w")
      (space-w-leader :keymaps 'normal "s" 'evil-window-split :wk "Split")
  )

#+END_SRC
